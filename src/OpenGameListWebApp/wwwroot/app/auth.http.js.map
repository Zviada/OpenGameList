{"version":3,"sources":["auth.http.ts"],"names":["AuthHttp","http","this","authKey","prototype","get","url","opts","configureAuth","post","data","put","delete","i","localStorage","getItem","auth","JSON","parse","console","log","access_token","headers","http_1","Headers","set","__decorate","core_1","Injectable","Http"],"mappings":"u2BAQI,SAAAA,SAAYC,MAHZC,KAAAD,KAAa,KACbC,KAAAC,QAAU,OAGND,KAAKD,KAAOA,KAoCpB,OAjCID,SAAAI,UAAAC,IAAA,SAAIC,IAAaC,MAEb,YAFa,IAAAA,OAAAA,SACbL,KAAKM,cAAcD,MACZL,KAAKD,KAAKI,IAAIC,IAAKC,OAG9BP,SAAAI,UAAAK,KAAA,SAAKH,IAAaI,KAAWH,MAEzB,YAFyB,IAAAA,OAAAA,SACzBL,KAAKM,cAAcD,MACZL,KAAKD,KAAKQ,KAAKH,IAAKI,KAAMH,OAGrCP,SAAAI,UAAAO,IAAA,SAAIL,IAAaI,KAAWH,MAExB,YAFwB,IAAAA,OAAAA,SACxBL,KAAKM,cAAcD,MACZL,KAAKD,KAAKU,IAAIL,IAAKI,KAAMH,OAGpCP,SAAAI,UAAAQ,OAAA,SAAON,IAAaC,MAEhB,YAFgB,IAAAA,OAAAA,SAChBL,KAAKM,cAAcD,MACZL,KAAKD,KAAKW,OAAON,IAAKC,OAGjCP,SAAAI,UAAAI,cAAA,SAAcD,MACV,IAAIM,EAAIC,aAAaC,QAAQb,KAAKC,SAClC,GAAS,MAALU,EAAW,CACX,IAAIG,KAAOC,KAAKC,MAAML,GACtBM,QAAQC,IAAIJ,MACa,MAArBA,KAAKK,eACe,MAAhBd,KAAKe,UACLf,KAAKe,QAAU,IAAIC,OAAAC,SAEvBjB,KAAKe,QAAQG,IAAI,gBAAiB,UAAUT,KAAKK,iBArCpDrB,SAAQ0B,YADpBC,OAAAC,6CAKqBL,OAAAM,QAJT7B","file":"auth.http.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Headers } from \"@angular/http\";\r\n\r\n@Injectable()\r\nexport class AuthHttp {\r\n    http: Http = null;\r\n    authKey = 'auth';\r\n\r\n    constructor(http: Http) {\r\n        this.http = http;\r\n    }\r\n\r\n    get(url: string, opts = {}) {\r\n        this.configureAuth(opts);\r\n        return this.http.get(url, opts);\r\n    }\r\n\r\n    post(url: string, data: any, opts = {}) {\r\n        this.configureAuth(opts);\r\n        return this.http.post(url, data, opts);\r\n    }\r\n\r\n    put(url: string, data: any, opts ={}) {\r\n        this.configureAuth(opts);\r\n        return this.http.put(url, data, opts);\r\n    }\r\n\r\n    delete(url: string, opts = {}) {\r\n        this.configureAuth(opts);\r\n        return this.http.delete(url, opts);\r\n    }\r\n\r\n    configureAuth(opts: any) {\r\n        var i = localStorage.getItem(this.authKey);\r\n        if (i != null) {\r\n            var auth = JSON.parse(i);\r\n            console.log(auth);\r\n            if (auth.access_token != null) {\r\n                if (opts.headers == null) {\r\n                    opts.headers = new Headers();\r\n                }\r\n                opts.headers.set('Authorization', `Bearer ${auth.access_token}`);\r\n            }\r\n        }\r\n    }\r\n}"]}