{"version":3,"sources":["item.service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getLatest","num","getItems","getMostViewed","getRandom","get","id","Error","url","map","res","json","catch","handleError","actionName","response","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","http_1","Http"],"mappings":"k8BAQI,SAAAA,YAAoBC,MAAAC,KAAAD,KAAAA,KAEZC,KAAAC,QAAU,aA0CtB,OAvCCH,YAAAI,UAAAC,UAAA,SAAUC,KACH,OAAOJ,KAAKK,SAAS,YAAaD,MAIzCN,YAAAI,UAAAI,cAAA,SAAcF,KACV,OAAOJ,KAAKK,SAAS,gBAAiBD,MAIvCN,YAAAI,UAAAK,UAAA,SAAUH,KACN,OAAOJ,KAAKK,SAAS,YAAaD,MAIzCN,YAAAI,UAAAM,IAAA,SAAIC,IACA,GAAU,MAANA,GACA,MAAM,IAAIC,MAAM,kBAGjB,IAAMC,IAAMX,KAAKC,QAAUQ,GAC9B,OAAOT,KAAKD,KAAKS,IAAIG,KAChBC,IAAI,SAAAC,KAAO,OAAMA,IAAIC,SACrBC,MAAMf,KAAKgB,cAITlB,YAAAI,UAAAG,SAAR,SAAiBY,WAAoBb,KACjC,IAAMO,IAAMX,KAAKC,QAAUgB,WAAa,KAAc,MAAPb,IAAcA,IAAM,IACnE,OAAOJ,KAAKD,KAAKS,IAAIG,KAChBC,IAAI,SAAAM,UAAY,OAAMA,SAASJ,SAC/BC,MAAMf,KAAKgB,cAGZlB,YAAAI,UAAAc,YAAR,SAAoBG,OAGhB,OADAC,QAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAML,OAAOK,OAAS,iBA5CzCrB,YAAW0B,YADvBC,OAAAC,6CAG6BC,OAAAC,QAFjB9B","file":"item.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Item } from \"./item\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n\r\n    constructor(private http: Http) { }\r\n\r\n    private baseUrl = 'api/items/'; //webapi URL\r\n\r\n\t//calls the [GET] /api/items/GetLatest/{n}\r\n\tgetLatest(num?: number) {\r\n        return this.getItems('GetLatest', num);\r\n    }\r\n\r\n\t//calls the [GET] /api/items/GetMostViewed/{n}\r\n\tgetMostViewed(num?: number) {\r\n\t    return this.getItems('GetMostViewed', num);\r\n    }\r\n\r\n\t//calls the [GET] /api/items/GetRandom/{n}\r\n    getRandom(num?: number) {\r\n        return this.getItems('GetRandom', num);\r\n    }\r\n\r\n\t//calls the [GET] /api/items/{id}\r\n\tget(id: number) {\r\n\t    if (id == null) {\r\n\t        throw new Error('id is required');\r\n        }\r\n\r\n        const url = this.baseUrl + id;\r\n\t    return this.http.get(url)\r\n\t        .map(res => <Item>res.json())\r\n\t        .catch(this.handleError);\r\n\t}\r\n\r\n\t//makes a GET call to /api/items/{actionName}/{n}\r\n    private getItems(actionName: string, num?: number) {\r\n        const url = this.baseUrl + actionName + '/' + (num != null ? num : '');\r\n        return this.http.get(url)\r\n            .map(response => <Item>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        //output errors to the console\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}