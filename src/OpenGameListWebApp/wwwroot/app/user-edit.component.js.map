{"version":3,"sources":["user-edit.component.ts"],"names":["UserEditComponent","fb","router","activatedRoute","authService","this","title","userForm","errorMessage","isRegister","snapshot","url","toString","isLoggedIn","navigate","prototype","ngOnInit","_this","group","username","forms_1","Validators","required","pattern","email","password","minLength","passwordConfirm","displayName","validator","compareValidator","addControl","FormControl","get","clearValidators","setValidators","subscribe","user","setValue","UserName","Email","DisplayName","fc1","fc2","controls","value","compareFailed","onSubmit","add","data","error","login","err","console","log","user_1","User","passwordCurrent","update","__decorate","core_1","Component","selector","template","FormBuilder","router_1","Router","ActivatedRoute","auth_service_1","AuthService"],"mappings":"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","file":"user-edit.component.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { AuthService } from \"./auth.service\";\r\nimport { User } from \"./user\";\r\n\r\n@Component({\r\n    selector: 'user-edit',\r\n    template: `\r\n<div class=\"user-container\">\r\n    <form class=\"form-user\" [formGroup]=\"userForm\" (submit)=\"onSubmit()\">\r\n        <h2 class=\"form-user-heading\">{{title}}</h2>\r\n        <span *ngIf=\"errorMessage\">{{errorMessage}}</span>\r\n        <div class=\"form-group\">\r\n            <input [attr.disabled]=\"!this.isRegister\" formControlName=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Choose an Username\" autofocus />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.username.valid\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.username.valid && !this.userForm.controls.username.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"email\" type=\"text\" class=\"form-control\" placeholder=\"Type your e-mail address\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.email.valid\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.email.valid && !this.userForm.controls.email.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div *ngIf=\"!this.isRegister\" class=\"form-group\">\r\n            <input formControlName=\"passwordCurrent\" type=\"password\" class=\"form-control\" placeholder=\"Current Password\" />\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.passwordCurrent.valid\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Choose a Password\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.password.valid && !this.userForm.controls.password.pristine\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.password.valid && !this.userForm.controls.password.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"passwordConfirm\" type=\"password\" class=\"form-control\" placeholder=\"Confirm your Password\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.password.pristine && !this.userForm.hasError('compareFailed')\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"(!this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.passwordConfirm.pristine) || this.userForm.hasError('compareFailed')\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"displayName\" type=\"text\" class=\"form-control\" placeholder=\"Choose a Display Name\"/>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input type=\"submit\" class=\"btn btn-primary btn-block\" [disabled]=\"!this.userForm.valid\" value=\"{{this.isRegister ? 'Register' : 'Save'}}\" />\r\n        </div>\r\n    </form>\r\n</div>\r\n    `\r\n})\r\nexport class UserEditComponent implements OnInit {\r\n    title = \"New User Registration\";\r\n    userForm: FormGroup = null;\r\n    errorMessage: string = null;\r\n    isRegister: boolean;\r\n\r\n    constructor(private fb: FormBuilder, private router: Router, private activatedRoute: ActivatedRoute, private authService: AuthService) {\r\n        //determine behaviou by fetching the active route\r\n        this.isRegister = (activatedRoute.snapshot.url.toString() === 'register');\r\n        if (this.isRegister === this.authService.isLoggedIn()) {\r\n            this.router.navigate(['']);\r\n        }\r\n        if (!this.isRegister) {\r\n            this.title = \"Edit Account\";\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.userForm = this.fb.group({\r\n                username: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9]+')]],\r\n                email: ['', [Validators.required, Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\")]],\r\n                password: ['', [Validators.required, Validators.minLength(6)]],\r\n                passwordConfirm: ['', [Validators.required, Validators.minLength(6)]],\r\n                displayName: ['', null]\r\n            },\r\n            {\r\n                validator: this.compareValidator('password', 'passwordConfirm')\r\n            });\r\n\r\n        if (!this.isRegister) {\r\n            this.userForm.addControl(\"passwordCurrent\", new FormControl('', Validators.required));\r\n            var password = this.userForm.get('password');\r\n            password.clearValidators();\r\n            password.setValidators(Validators.minLength(6));\r\n            var passwordConfirm = this.userForm.get('passwordConfirm');\r\n            passwordConfirm.clearValidators();\r\n            passwordConfirm.setValidators(Validators.minLength(6));\r\n            this.authService.get()\r\n                .subscribe(user => {\r\n                    this.userForm.get('username').setValue(user.UserName);\r\n                    this.userForm.get('email').setValue(user.Email);\r\n                    this.userForm.get('displayName').setValue(user.DisplayName);\r\n\r\n                });\r\n        }\r\n    }\r\n\r\n    compareValidator(fc1: string, fc2: string) {\r\n        return (group: FormGroup): { [key: string]: any } => {\r\n            let password = group.controls[fc1];\r\n            let passwordConfirm = group.controls[fc2];\r\n\r\n            return password.value === passwordConfirm.value ? null : { compareFailed: true };\r\n        }\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.isRegister) {\r\n            this.authService.add(this.userForm.value)\r\n                .subscribe(data => {\r\n                        if (data.error == null) {\r\n                            //registration successful\r\n                            this.errorMessage = null;\r\n                            this.authService.login(this.userForm.value.username, this.userForm.value.password)\r\n                                .subscribe(data => {\r\n                                        //login successful\r\n                                        this.errorMessage = null;\r\n                                        this.router.navigate(['']);\r\n                                    },\r\n                                    err => {\r\n                                        console.log(err);\r\n                                        this.errorMessage = \"Warning: Username or Password mismatch\";\r\n                                    });\r\n                        } else {\r\n                            this.errorMessage = data.error;\r\n                        }\r\n                    },\r\n                    err => {\r\n                        //server/connection error\r\n                        this.errorMessage = err;\r\n                    });\r\n        } else {\r\n            let user = new User(\r\n                this.userForm.value.username,\r\n                this.userForm.value.passwordCurrent,\r\n                this.userForm.value.password,\r\n                this.userForm.value.email,\r\n                this.userForm.value.displayName);\r\n            this.authService.update(user)\r\n                .subscribe(data => {\r\n                        if (data.error == null) {\r\n                            //update successful\r\n                            this.errorMessage = null;\r\n                            this.router.navigate(['']);\r\n                        } else {\r\n                            //update failure\r\n                            this.errorMessage = data.error;\r\n                        }\r\n                    },\r\n                    err => {\r\n                        //server/connection error\r\n                        this.errorMessage = err;\r\n                    });\r\n        }\r\n    }\r\n}"]}