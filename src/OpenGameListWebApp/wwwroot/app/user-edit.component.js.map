{"version":3,"sources":["user-edit.component.ts"],"names":["UserEditComponent","fb","router","authService","this","title","userForm","errorMessage","isLoggedIn","navigate","prototype","ngOnInit","group","username","forms_1","Validators","required","pattern","email","password","minLength","passwordConfirm","displayName","validator","compareValidator","fc1","fc2","controls","value","compareFailed","onSubmit","_this","add","subscribe","data","error","login","err","console","log","__decorate","core_1","Component","selector","template","FormBuilder","router_1","Router","auth_service_1","AuthService"],"mappings":"+hCAuEI,SAAAA,kBAAoBC,GAAyBC,OAAwBC,aAAjDC,KAAAH,GAAAA,GAAyBG,KAAAF,OAAAA,OAAwBE,KAAAD,YAAAA,YAJrEC,KAAAC,MAAQ,wBACRD,KAAAE,SAAsB,KACtBF,KAAAG,aAAuB,KAGfH,KAAKD,YAAYK,cACjBJ,KAAKF,OAAOO,UAAU,KAmDlC,OA/CIT,kBAAAU,UAAAC,SAAA,WACIP,KAAKE,SAAWF,KAAKH,GAAGW,OAChBC,UAAW,IAAKC,QAAAC,WAAWC,SAAUF,QAAAC,WAAWE,QAAQ,kBACxDC,OAAQ,IAAKJ,QAAAC,WAAWC,SAAUF,QAAAC,WAAWE,QAAQ,yIACrDE,UAAW,IAAKL,QAAAC,WAAWC,SAAUF,QAAAC,WAAWK,UAAU,KAC1DC,iBAAkB,IAAKP,QAAAC,WAAWC,SAAUF,QAAAC,WAAWK,UAAU,KACjEE,aAAc,GAAI,QAGlBC,UAAWnB,KAAKoB,iBAAiB,WAAY,sBAIzDxB,kBAAAU,UAAAc,iBAAA,SAAiBC,IAAaC,KAC1B,OAAO,SAACd,OACJ,IAAIO,SAAWP,MAAMe,SAASF,KAC1BJ,gBAAkBT,MAAMe,SAASD,KAErC,OAAOP,SAASS,QAAUP,gBAAgBO,MAAQ,MAASC,eAAe,KAIlF7B,kBAAAU,UAAAoB,SAAA,WAAA,IAAAC,MAAA3B,KACIA,KAAKD,YAAY6B,IAAI5B,KAAKE,SAASsB,OAC9BK,UAAU,SAAAC,MACe,MAAdA,KAAKC,OAELJ,MAAKxB,aAAe,KACpBwB,MAAK5B,YAAYiC,MAAML,MAAKzB,SAASsB,MAAMf,SAAUkB,MAAKzB,SAASsB,MAAMT,UACpEc,UAAU,SAAAC,MAECH,MAAKxB,aAAe,KACpBwB,MAAK7B,OAAOO,UAAU,MAE1B,SAAA4B,KACIC,QAAQC,IAAIF,KACZN,MAAKxB,aAAe,4CAGhCwB,MAAKxB,aAAe2B,KAAKC,OAGjC,SAAAE,KAEIN,MAAKxB,aAAe8B,OAvD/BrC,kBAAiBwC,YA5D7BC,OAAAC,WACGC,SAAU,YACVC,SAAU,82GA+Dc9B,QAAA+B,YAA6BC,SAAAC,OAA6BC,eAAAC,eALzEjD","file":"user-edit.component.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"./auth.service\";\r\nimport { User } from \"./user\";\r\n\r\n@Component({\r\n    selector: 'user-edit',\r\n    template: `\r\n<div class=\"user-container\">\r\n    <form class=\"form-user\" [formGroup]=\"userForm\" (submit)=\"onSubmit()\">\r\n        <h2 class=\"form-user-heading\">{{title}}</h2>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Choose an Username\" autofocus />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.username.valid\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.username.valid && !this.userForm.controls.username.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"email\" type=\"text\" class=\"form-control\" placeholder=\"Type your e-mail address\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.email.valid\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.email.valid && !this.userForm.controls.email.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Choose a Password\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.password.valid && !this.userForm.controls.password.pristine\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.password.valid && !this.userForm.controls.password.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"passwordConfirm\" type=\"password\" class=\"form-control\" placeholder=\"Confirm your Password\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.password.pristine && !this.userForm.hasError('compareFailed')\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"(!this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.passwordConfirm.pristine) || this.userForm.hasError('compareFailed')\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"displayName\" type=\"text\" class=\"form-control\" placeholder=\"Choose a Display Name\"/>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input type=\"submit\" class=\"btn btn-primary btn-block\" [disabled]=\"!userForm.valid\" value=\"Register\" />\r\n        </div>\r\n    </form>\r\n</div>\r\n    `\r\n})\r\nexport class UserEditComponent implements OnInit {\r\n    title = \"New User Registration\";\r\n    userForm: FormGroup = null;\r\n    errorMessage: string = null;\r\n\r\n    constructor(private fb: FormBuilder, private router: Router, private authService: AuthService) {\r\n        if (this.authService.isLoggedIn()) {\r\n            this.router.navigate(['']);\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.userForm = this.fb.group({\r\n                username: ['', [Validators.required, Validators.pattern('[a-zA-Z0-9]+')]],\r\n                email: ['', [Validators.required, Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\")]],\r\n                password: ['', [Validators.required, Validators.minLength(6)]],\r\n                passwordConfirm: ['', [Validators.required, Validators.minLength(6)]],\r\n                displayName: ['', null]\r\n            },\r\n            {\r\n                validator: this.compareValidator('password', 'passwordConfirm')\r\n            });\r\n    }\r\n\r\n    compareValidator(fc1: string, fc2: string) {\r\n        return (group: FormGroup): { [key: string]: any } => {\r\n            let password = group.controls[fc1];\r\n            let passwordConfirm = group.controls[fc2];\r\n\r\n            return password.value === passwordConfirm.value ? null : { compareFailed: true };\r\n        }\r\n    }\r\n\r\n    onSubmit() {\r\n        this.authService.add(this.userForm.value)\r\n            .subscribe(data => {\r\n                    if (data.error == null) {\r\n                        //registration successful\r\n                        this.errorMessage = null;\r\n                        this.authService.login(this.userForm.value.username, this.userForm.value.password)\r\n                            .subscribe(data => {\r\n                                        //login successful\r\n                                        this.errorMessage = null;\r\n                                        this.router.navigate(['']);\r\n                                    },\r\n                                    err => {\r\n                                        console.log(err);\r\n                                        this.errorMessage = \"Warning: Username or Password mismatch\";\r\n                                    });\r\n                        } else {\r\n                            this.errorMessage = data.error;\r\n                        }\r\n                    },\r\n                    err => {\r\n                        //server/connection error\r\n                        this.errorMessage = err;\r\n                    });\r\n    }\r\n}"]}