{"version":3,"sources":["auth.service.ts"],"names":["AuthService","http","this","authKey","prototype","login","username","password","_this","data","client_id","grant_type","scope","post","toUrlEncodedString","http_1","RequestOptions","headers","Headers","Content-Type","map","response","auth","json","console","log","setAuth","logout","body","key","length","encodeURIComponent","localStorage","setItem","JSON","stringify","removeItem","getAuth","i","getItem","parse","isLoggedIn","get","add","user","update","put","__decorate","core_1","Injectable","auth_http_1","AuthHttp"],"mappings":"07BAUI,SAAAA,YAAoBC,MAAAC,KAAAD,KAAAA,KAFpBC,KAAAC,QAAU,OA4Fd,OAxFIH,YAAAI,UAAAC,MAAA,SAAMC,SAAkBC,UAAxB,IAAAC,MAAAN,KAGQO,MACAH,SAAUA,SACVC,SAAUA,SACVG,UAAW,eAEXC,WAAY,WAEZC,MAAO,gCAGX,OAAOV,KAAKD,KAAKY,KAZP,oBAcFX,KAAKY,mBAAmBL,MACxB,IAAIM,OAAAC,gBACAC,QAAS,IAAIF,OAAAG,SAAUC,eAAgB,yCAE9CC,IAAI,SAAAC,UACD,IAAIC,KAAOD,SAASE,OAIpB,OAHAC,QAAQC,IAAI,qDACZD,QAAQC,IAAIH,MACZd,MAAKkB,QAAQJ,MACNA,QAInBtB,YAAAI,UAAAuB,OAAA,WAEI,OADAzB,KAAKwB,QAAQ,OACN,GAIX1B,YAAAI,UAAAU,mBAAA,SAAmBL,MACf,IAAImB,KAAO,GACX,IAAK,IAAIC,OAAOpB,KACZmB,OAASA,KAAKE,OAAS,IAAM,IAAMD,IAAM,IAAME,mBAAmBtB,KAAKoB,MAQ3E,OAAOD,MAIX5B,YAAAI,UAAAsB,QAAA,SAAQJ,MAMJ,OALIA,KACAU,aAAaC,QAAQ/B,KAAKC,QAAS+B,KAAKC,UAAUb,OAElDU,aAAaI,WAAWlC,KAAKC,UAE1B,GAIXH,YAAAI,UAAAiC,QAAA,WACI,IAAIC,EAAIN,aAAaO,QAAQrC,KAAKC,SAClC,OAAImC,EACOJ,KAAKM,MAAMF,GAEf,MAIXtC,YAAAI,UAAAqC,WAAA,WACI,OAA6C,MAAtCT,aAAaO,QAAQrC,KAAKC,UAGrCH,YAAAI,UAAAsC,IAAA,WACI,OAAOxC,KAAKD,KAAKyC,IAAI,gBAChBtB,IAAI,SAAAC,UAAY,OAAAA,SAASE,UAGlCvB,YAAAI,UAAAuC,IAAA,SAAIC,MACA,OAAO1C,KAAKD,KAAKY,KAAK,eAAgBqB,KAAKC,UAAUS,MAC/B,IAAI7B,OAAAC,gBAAiBC,QAAS,IAAIF,OAAAG,SAAUC,eAAgB,wBAC7EC,IAAI,SAAAC,UAAY,OAAAA,SAASE,UAGlCvB,YAAAI,UAAAyC,OAAA,SAAOD,MACH,OAAO1C,KAAKD,KAAK6C,IAAI,eAAgBZ,KAAKC,UAAUS,MAC5C,IAAI7B,OAAAC,gBAAiBC,QAAS,IAAIF,OAAAG,SAAUC,eAAgB,wBAC/DC,IAAI,SAAAC,UAAY,OAAAA,SAASE,UA3FzBvB,YAAW+C,YADvBC,OAAAC,6CAI6BC,YAAAC,YAHjBnD","file":"auth.service.js","sourcesContent":["import { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { Headers, Response, RequestOptions } from \"@angular/http\";\r\nimport { AuthHttp } from \"./auth.http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { User } from \"./user\";\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    authKey = \"auth\";\r\n\r\n    constructor(private http: AuthHttp) {}\r\n\r\n    login(username: string, password: string): any {\r\n        var url = \"api/connect/token\"; //JwtProvider's LoginPath\r\n\r\n        var data = {\r\n            username: username,\r\n            password: password,\r\n            client_id: \"OpenGameList\",\r\n            //required when signing up with username/password\r\n            grant_type: \"password\",\r\n            //space-separated list of scopes for which the token is issued\r\n            scope: \"offline_access profile email\"\r\n        };\r\n\r\n        return this.http.post(\r\n                url,\r\n                this.toUrlEncodedString(data),\r\n                new RequestOptions({\r\n                    headers: new Headers({ \"Content-Type\": \"application/x-www-form-urlencoded\" })\r\n                }))\r\n            .map(response => {\r\n                var auth = response.json();\r\n                console.log('The following auth JSON object has been received:');\r\n                console.log(auth);\r\n                this.setAuth(auth);\r\n                return auth;\r\n            });\r\n    }\r\n\r\n    logout(): boolean {\r\n        this.setAuth(null);\r\n        return true;\r\n    }\r\n\r\n    //Converts a JSON object to urlencoded format\r\n    toUrlEncodedString(data: any) {\r\n        var body = '';\r\n        for (let key in data) {\r\n            body += (body.length ? '&' : '') + key + '=' + encodeURIComponent(data[key]);\r\n\r\n            /*if (body.length) {\r\n                body += '&';\r\n            }\r\n            body += key + '=';\r\n            body += encodeURIComponent(data[key]);*/\r\n        }\r\n        return body;\r\n    }\r\n\r\n    //Persist auth into localStorage or removes it if a NULL argument is given\r\n    setAuth(auth: any): boolean {\r\n        if (auth) {\r\n            localStorage.setItem(this.authKey, JSON.stringify(auth));\r\n        } else {\r\n            localStorage.removeItem(this.authKey);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //Retrieves the auth JSON object (or NULL of none)\r\n    getAuth(): any {\r\n        let i = localStorage.getItem(this.authKey);\r\n        if (i) {\r\n            return JSON.parse(i);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //Returns TRUE if the user is logged in, FALSE otherwise\r\n    isLoggedIn(): boolean {\r\n        return localStorage.getItem(this.authKey) != null;\r\n    }\r\n\r\n    get() {\r\n        return this.http.get('api/accounts')\r\n            .map(response => response.json());\r\n    }\r\n\r\n    add(user: User) {\r\n        return this.http.post('api/accounts', JSON.stringify(user),\r\n                              new RequestOptions({ headers: new Headers({ 'Content-Type': 'application/json' }) }))\r\n            .map(response => response.json());\r\n    }\r\n\r\n    update(user: User) {\r\n        return this.http.put('api/accounts', JSON.stringify(user),\r\n                new RequestOptions({ headers: new Headers({ 'Content-Type': 'application/json' }) }))\r\n            .map(response => response.json());\r\n    }\r\n}\r\n"]}